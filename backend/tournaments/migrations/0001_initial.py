# Generated by Django 5.2.3 on 2025-08-01 11:52

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Court",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30)),
                ("number", models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="Tournament",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(default="Padel Tournament", max_length=30)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NEW", "New"),
                            ("IN PROGRESS", "In progress"),
                            ("FINISHED", "Finished"),
                        ],
                        default="NEW",
                        max_length=20,
                    ),
                ),
                (
                    "number_of_rounds",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "final_round",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        choices=[("AMERICANO", "Americano"), ("MEXICANO", "Mexicano")],
                        max_length=20,
                    ),
                ),
                (
                    "result_sorting",
                    models.CharField(
                        choices=[("WINS", "Wins"), ("POINTS", "Points")], max_length=20
                    ),
                ),
                (
                    "team_format",
                    models.CharField(
                        choices=[("PLAYER", "Player"), ("PAIR", "Pair")], max_length=20
                    ),
                ),
                (
                    "final_match",
                    models.IntegerField(
                        choices=[
                            (1, "1 & 3 vs 2 & 4"),
                            (2, "1 & 2 vs 3 & 4"),
                            (3, "1 & 4 vs 2 & 3"),
                        ]
                    ),
                ),
                (
                    "points_per_match",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ]
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "round_number",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(25),
                        ]
                    ),
                ),
                (
                    "team_1_score",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "team_2_score",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                ("played", models.BooleanField(default=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "court",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches",
                        to="tournaments.court",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MatchPlayer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "team",
                    models.CharField(
                        choices=[("team1", "Team 1"), ("team2", "Team 2")],
                        max_length=10,
                    ),
                ),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tournaments.match",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tournaments.player",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="match",
            name="players",
            field=models.ManyToManyField(
                related_name="matches",
                through="tournaments.MatchPlayer",
                to="tournaments.player",
            ),
        ),
        migrations.CreateModel(
            name="RankingSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("round_number", models.PositiveIntegerField()),
                ("points", models.PositiveIntegerField()),
                ("is_winner", models.BooleanField(default=False)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ranking_snapshots",
                        to="tournaments.player",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ranking_snapshots",
                        to="tournaments.tournament",
                    ),
                ),
            ],
            options={
                "ordering": ["round_number"],
            },
        ),
        migrations.AddField(
            model_name="player",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="players",
                to="tournaments.tournament",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="matches",
                to="tournaments.tournament",
            ),
        ),
        migrations.AddField(
            model_name="court",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="courts",
                to="tournaments.tournament",
            ),
        ),
        migrations.AddConstraint(
            model_name="matchplayer",
            constraint=models.UniqueConstraint(
                fields=("match", "player"), name="unique_player_per_match"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rankingsnapshot",
            unique_together={("tournament", "player", "round_number")},
        ),
        migrations.AddConstraint(
            model_name="player",
            constraint=models.UniqueConstraint(
                fields=("name", "tournament"), name="unique_player_name_per_tournament"
            ),
        ),
        migrations.AddConstraint(
            model_name="court",
            constraint=models.UniqueConstraint(
                fields=("number", "tournament"),
                name="unique_court_number_per_tournament",
            ),
        ),
        migrations.AddConstraint(
            model_name="court",
            constraint=models.UniqueConstraint(
                fields=("name", "tournament"), name="unique_court_name_per_tournament"
            ),
        ),
    ]
